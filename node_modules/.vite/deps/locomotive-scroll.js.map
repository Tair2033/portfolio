{
  "version": 3,
  "sources": ["../../@studio-freight/lenis/src/maths.js", "../../@studio-freight/lenis/src/animate.js", "../../@studio-freight/lenis/src/debounce.js", "../../@studio-freight/lenis/src/dimensions.js", "../../@studio-freight/lenis/src/nanoevents.js", "../../@studio-freight/lenis/src/virtual-scroll.js", "../../@studio-freight/lenis/src/index.js", "../../locomotive-scroll/src/core/IO.ts", "../../locomotive-scroll/src/utils/maths.ts", "../../locomotive-scroll/src/core/ScrollElement.ts", "../../locomotive-scroll/src/core/Core.ts", "../../locomotive-scroll/src/core/RO.ts", "../../locomotive-scroll/src/index.ts"],
  "sourcesContent": ["// Clamp a value between a minimum and maximum value\nexport function clamp(min, input, max) {\n  return Math.max(min, Math.min(input, max))\n}\n\n// Truncate a floating-point number to a specified number of decimal places\nexport function truncate(value, decimals = 0) {\n  return parseFloat(value.toFixed(decimals))\n}\n\n// Linearly interpolate between two values using an amount (0 <= amt <= 1)\nexport function lerp(start, end, amt) {\n  return (1 - amt) * start + amt * end\n}\n\n// Calculate the modulo of the dividend and divisor while keeping the result within the same sign as the divisor\nexport function clampedModulo(dividend, divisor) {\n  let remainder = dividend % divisor\n\n  // If the remainder and divisor have different signs, adjust the remainder\n  if ((divisor > 0 && remainder < 0) || (divisor < 0 && remainder > 0)) {\n    remainder += divisor\n  }\n\n  return remainder\n}\n", "import { clamp, lerp } from './maths'\n\n// Animate class to handle value animations with lerping or easing\nexport class Animate {\n  // Advance the animation by the given delta time\n  advance(deltaTime) {\n    if (!this.isRunning) return\n\n    let completed = false\n\n    if (this.lerp) {\n      this.value = lerp(this.value, this.to, this.lerp)\n      if (Math.round(this.value) === this.to) {\n        this.value = this.to\n        completed = true\n      }\n    } else {\n      this.currentTime += deltaTime\n      const linearProgress = clamp(0, this.currentTime / this.duration, 1)\n\n      completed = linearProgress >= 1\n      const easedProgress = completed ? 1 : this.easing(linearProgress)\n      this.value = this.from + (this.to - this.from) * easedProgress\n    }\n\n    // Call the onUpdate callback with the current value and completed status\n    this.onUpdate?.(this.value, { completed })\n\n    if (completed) {\n      this.stop()\n    }\n  }\n\n  // Stop the animation\n  stop() {\n    this.isRunning = false\n  }\n\n  // Set up the animation from a starting value to an ending value\n  // with optional parameters for lerping, duration, easing, and onUpdate callback\n  fromTo(from, to, { lerp = 0.1, duration = 1, easing = (t) => t, onUpdate }) {\n    this.from = this.value = from\n    this.to = to\n    this.lerp = lerp\n    this.duration = duration\n    this.easing = easing\n    this.currentTime = 0\n    this.isRunning = true\n\n    this.onUpdate = onUpdate\n  }\n}\n", "export function debounce(callback, delay) {\n  let timer\n  return function () {\n    let args = arguments\n    let context = this\n    clearTimeout(timer)\n    timer = setTimeout(function () {\n      callback.apply(context, args)\n    }, delay)\n  }\n}\n", "import { debounce } from './debounce'\n\nexport class Dimensions {\n  constructor(wrapper, content) {\n    this.wrapper = wrapper\n    this.content = content\n\n    if (this.wrapper === window) {\n      window.addEventListener('resize', this.onWindowResize, false)\n      this.onWindowResize()\n    } else {\n      this.wrapperResizeObserver = new ResizeObserver(\n        debounce(this.onWrapperResize, 100)\n      )\n      this.wrapperResizeObserver.observe(this.wrapper)\n      this.onWrapperResize()\n    }\n\n    this.contentResizeObserver = new ResizeObserver(\n      debounce(this.onContentResize, 100)\n    )\n    this.contentResizeObserver.observe(this.content)\n    this.onContentResize()\n  }\n\n  onWindowResize = () => {\n    this.width = window.innerWidth\n    this.height = window.innerHeight\n  }\n\n  destroy() {\n    window.removeEventListener('resize', this.onWindowResize, false)\n\n    this.wrapperResizeObserver?.disconnect()\n    this.contentResizeObserver?.disconnect()\n  }\n\n  onWrapperResize = () => {\n    this.width = this.wrapper.clientWidth\n    this.height = this.wrapper.clientHeight\n  }\n\n  onContentResize = () => {\n    const element =\n      this.wrapper === window ? document.documentElement : this.wrapper\n    this.scrollHeight = element.scrollHeight\n    this.scrollWidth = element.scrollWidth\n  }\n\n  get limit() {\n    return {\n      x: this.scrollWidth - this.width,\n      y: this.scrollHeight - this.height,\n    }\n  }\n}\n", "export let createNanoEvents = () => ({\n  events: {},\n\n  // Emit an event with the provided arguments\n  emit(event, ...args) {\n    let callbacks = this.events[event] || []\n    for (let i = 0, length = callbacks.length; i < length; i++) {\n      callbacks[i](...args)\n    }\n  },\n\n  // Register a callback for the specified event\n  on(event, cb) {\n    // Add the callback to the event's callback list, or create a new list with the callback\n    this.events[event]?.push(cb) || (this.events[event] = [cb])\n\n    // Return an unsubscribe function\n    return () => {\n      this.events[event] = this.events[event]?.filter((i) => cb !== i)\n    }\n  },\n})\n", "import { clamp } from './maths'\nimport { createNanoEvents } from './nanoevents'\n\nexport class VirtualScroll {\n  constructor(\n    element,\n    { wheelMultiplier = 1, touchMultiplier = 2, normalizeWheel = false }\n  ) {\n    this.element = element\n    this.wheelMultiplier = wheelMultiplier\n    this.touchMultiplier = touchMultiplier\n    this.normalizeWheel = normalizeWheel\n\n    this.touchStart = {\n      x: null,\n      y: null,\n    }\n\n    this.emitter = createNanoEvents()\n\n    this.element.addEventListener('wheel', this.onWheel, { passive: false })\n    this.element.addEventListener('touchstart', this.onTouchStart, {\n      passive: false,\n    })\n    this.element.addEventListener('touchmove', this.onTouchMove, {\n      passive: false,\n    })\n    this.element.addEventListener('touchend', this.onTouchEnd, {\n      passive: false,\n    })\n  }\n\n  // Add an event listener for the given event and callback\n  on(event, callback) {\n    return this.emitter.on(event, callback)\n  }\n\n  // Remove all event listeners and clean up\n  destroy() {\n    this.emitter.events = {}\n\n    this.element.removeEventListener('wheel', this.onWheel, {\n      passive: false,\n    })\n    this.element.removeEventListener('touchstart', this.onTouchStart, {\n      passive: false,\n    })\n    this.element.removeEventListener('touchmove', this.onTouchMove, {\n      passive: false,\n    })\n    this.element.removeEventListener('touchend', this.onTouchEnd, {\n      passive: false,\n    })\n  }\n\n  // Event handler for 'touchstart' event\n  onTouchStart = (event) => {\n    const { clientX, clientY } = event.targetTouches\n      ? event.targetTouches[0]\n      : event\n\n    this.touchStart.x = clientX\n    this.touchStart.y = clientY\n\n    this.lastDelta = {\n      x: 0,\n      y: 0,\n    }\n  }\n\n  // Event handler for 'touchmove' event\n  onTouchMove = (event) => {\n    const { clientX, clientY } = event.targetTouches\n      ? event.targetTouches[0]\n      : event\n\n    const deltaX = -(clientX - this.touchStart.x) * this.touchMultiplier\n    const deltaY = -(clientY - this.touchStart.y) * this.touchMultiplier\n\n    this.touchStart.x = clientX\n    this.touchStart.y = clientY\n\n    this.lastDelta = {\n      x: deltaX,\n      y: deltaY,\n    }\n\n    this.emitter.emit('scroll', {\n      type: 'touch',\n      deltaX,\n      deltaY,\n      event,\n    })\n  }\n\n  onTouchEnd = (event) => {\n    this.emitter.emit('scroll', {\n      type: 'touch',\n      inertia: true,\n      deltaX: this.lastDelta.x,\n      deltaY: this.lastDelta.y,\n      event,\n    })\n  }\n\n  // Event handler for 'wheel' event\n  onWheel = (event) => {\n    let { deltaX, deltaY } = event\n\n    if (this.normalizeWheel) {\n      deltaX = clamp(-100, deltaX, 100)\n      deltaY = clamp(-100, deltaY, 100)\n    }\n\n    deltaX *= this.wheelMultiplier\n    deltaY *= this.wheelMultiplier\n\n    this.emitter.emit('scroll', { type: 'wheel', deltaX, deltaY, event })\n  }\n}\n", "import { version } from '../package.json'\nimport { Animate } from './animate'\nimport { Dimensions } from './dimensions'\nimport { clamp, clampedModulo } from './maths'\nimport { createNanoEvents } from './nanoevents'\nimport { VirtualScroll } from './virtual-scroll'\n\n// Technical explaination\n// - listen to 'wheel' events\n// - prevent 'wheel' event to prevent scroll\n// - normalize wheel delta\n// - add delta to targetScroll\n// - animate scroll to targetScroll (smooth context)\n// - if animation is not running, listen to 'scroll' events (native context)\n\nexport default class Lenis {\n  // isScrolling = true when scroll is animating\n  // isStopped = true if user should not be able to scroll - enable/disable programatically\n  // isSmooth = true if scroll should be animated\n  // isLocked = same as isStopped but enabled/disabled when scroll reaches target\n\n  /**\n   * @typedef {(t: number) => number} EasingFunction\n   * @typedef {'vertical' | 'horizontal'} Orientation\n   * @typedef {'vertical' | 'horizontal' | 'both'} GestureOrientation\n   *\n   * @typedef LenisOptions\n   * @property {Orientation} [direction]\n   * @property {GestureOrientation} [gestureDirection]\n   * @property {number} [mouseMultiplier]\n   * @property {boolean} [smooth]\n   *\n   * @property {Window | HTMLElement} [wrapper]\n   * @property {HTMLElement} [content]\n   * @property {Window | HTMLElement} [wheelEventsTarget]\n   * @property {boolean} [smoothWheel]\n   * @property {boolean} [smoothTouch]\n   * @property {boolean} [syncTouch]\n   * @property {number} [syncTouchLerp]\n   * @property {number} [touchInertiaMultiplier]\n   * @property {number} [duration]\n   * @property {EasingFunction} [easing]\n   * @property {number} [lerp]\n   * @property {boolean} [infinite]\n   * @property {Orientation} [orientation]\n   * @property {GestureOrientation} [gestureOrientation]\n   * @property {number} [touchMultiplier]\n   * @property {number} [wheelMultiplier]\n   * @property {boolean} [normalizeWheel]\n   *\n   * @param {LenisOptions}\n   */\n  constructor({\n    //--legacy options--//\n    direction,\n    gestureDirection,\n    mouseMultiplier,\n    smooth,\n    //--legacy options--//\n    wrapper = window,\n    content = document.documentElement,\n    wheelEventsTarget = wrapper,\n    smoothWheel = smooth ?? true,\n    smoothTouch = false,\n    syncTouch = false,\n    syncTouchLerp = 0.1,\n    touchInertiaMultiplier = 35,\n    duration, // in seconds\n    easing = (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\n    lerp = duration ? null : 0.1,\n    infinite = false,\n    orientation = direction ?? 'vertical', // vertical, horizontal\n    gestureOrientation = gestureDirection ?? 'vertical', // vertical, horizontal, both\n    touchMultiplier = 1,\n    wheelMultiplier = mouseMultiplier ?? 1,\n    normalizeWheel = false,\n  } = {}) {\n    // warn about legacy options\n    if (direction) {\n      console.warn(\n        'Lenis: `direction` option is deprecated, use `orientation` instead'\n      )\n    }\n    if (gestureDirection) {\n      console.warn(\n        'Lenis: `gestureDirection` option is deprecated, use `gestureOrientation` instead'\n      )\n    }\n    if (mouseMultiplier) {\n      console.warn(\n        'Lenis: `mouseMultiplier` option is deprecated, use `wheelMultiplier` instead'\n      )\n    }\n    if (smooth) {\n      console.warn(\n        'Lenis: `smooth` option is deprecated, use `smoothWheel` instead'\n      )\n    }\n\n    window.lenisVersion = version\n\n    // if wrapper is html or body, fallback to window\n    if (wrapper === document.documentElement || wrapper === document.body) {\n      wrapper = window\n    }\n\n    this.options = {\n      wrapper,\n      content,\n      wheelEventsTarget,\n      smoothWheel,\n      smoothTouch,\n      syncTouch,\n      syncTouchLerp,\n      touchInertiaMultiplier,\n      duration,\n      easing,\n      lerp,\n      infinite,\n      gestureOrientation,\n      orientation,\n      touchMultiplier,\n      wheelMultiplier,\n      normalizeWheel,\n    }\n\n    this.dimensions = new Dimensions(wrapper, content)\n    this.rootElement.classList.add('lenis')\n\n    this.velocity = 0\n    this.isStopped = false\n    this.isSmooth = smoothWheel || smoothTouch\n    this.isScrolling = false\n    this.targetScroll = this.animatedScroll = this.actualScroll\n    this.animate = new Animate()\n    this.emitter = createNanoEvents()\n\n    this.options.wrapper.addEventListener('scroll', this.onScroll, {\n      passive: false,\n    })\n\n    this.virtualScroll = new VirtualScroll(wheelEventsTarget, {\n      touchMultiplier,\n      wheelMultiplier,\n      normalizeWheel,\n    })\n    this.virtualScroll.on('scroll', this.onVirtualScroll)\n  }\n\n  destroy() {\n    this.emitter.events = {}\n\n    this.options.wrapper.removeEventListener('scroll', this.onScroll, {\n      passive: false,\n    })\n\n    this.virtualScroll.destroy()\n  }\n\n  on(event, callback) {\n    return this.emitter.on(event, callback)\n  }\n\n  off(event, callback) {\n    this.emitter.events[event] = this.emitter.events[event]?.filter(\n      (i) => callback !== i\n    )\n  }\n\n  setScroll(scroll) {\n    // apply scroll value immediately\n    if (this.isHorizontal) {\n      this.rootElement.scrollLeft = scroll\n    } else {\n      this.rootElement.scrollTop = scroll\n    }\n  }\n\n  onVirtualScroll = ({ type, inertia, deltaX, deltaY, event }) => {\n    // keep zoom feature\n    if (event.ctrlKey) return\n\n    const isTouch = type === 'touch'\n    const isWheel = type === 'wheel'\n\n    if (\n      (this.options.gestureOrientation === 'vertical' && deltaY === 0) || // trackpad previous/next page gesture\n      (this.options.gestureOrientation === 'horizontal' && deltaX === 0) ||\n      (isTouch &&\n        this.options.gestureOrientation === 'vertical' &&\n        this.scroll === 0 &&\n        !this.options.infinite &&\n        deltaY <= 0) // touch pull to refresh\n    )\n      return\n\n    // catch if scrolling on nested scroll elements\n    if (\n      !!event\n        .composedPath()\n        .find((node) => node?.hasAttribute?.('data-lenis-prevent'))\n    )\n      return\n\n    if (this.isStopped || this.isLocked) {\n      event.preventDefault()\n      return\n    }\n\n    this.isSmooth =\n      ((this.options.smoothTouch || this.options.syncTouch) && isTouch) ||\n      (this.options.smoothWheel && isWheel)\n\n    if (!this.isSmooth) {\n      this.isScrolling = false\n      this.animate.stop()\n      return\n    }\n\n    event.preventDefault()\n\n    let delta = deltaY\n    if (this.options.gestureOrientation === 'both') {\n      delta = Math.abs(deltaY) > Math.abs(deltaX) ? deltaY : deltaX\n    } else if (this.options.gestureOrientation === 'horizontal') {\n      delta = deltaX\n    }\n\n    const syncTouch = isTouch && this.options.syncTouch\n    const hasTouchInertia = isTouch && inertia && Math.abs(delta) > 1\n    if (hasTouchInertia) {\n      delta = this.velocity * this.options.touchInertiaMultiplier\n    }\n\n    this.scrollTo(this.targetScroll + delta, {\n      programmatic: false,\n      ...(syncTouch && {\n        lerp: hasTouchInertia ? this.syncTouchLerp : 0.4, // should be 1 but had to leave 0.4 for iOS.....\n      }),\n    })\n  }\n\n  emit() {\n    this.emitter.emit('scroll', this)\n  }\n\n  onScroll = () => {\n    if (!this.isScrolling) {\n      const lastScroll = this.animatedScroll\n      this.animatedScroll = this.targetScroll = this.actualScroll\n      this.velocity = 0\n      this.direction = Math.sign(this.animatedScroll - lastScroll)\n      this.emit()\n    }\n  }\n\n  reset() {\n    this.isLocked = false\n    this.isScrolling = false\n    this.velocity = 0\n    this.animate.stop()\n  }\n\n  start() {\n    this.isStopped = false\n\n    this.reset()\n  }\n\n  stop() {\n    this.isStopped = true\n    this.animate.stop()\n\n    this.reset()\n  }\n\n  raf(time) {\n    const deltaTime = time - (this.time || time)\n    this.time = time\n\n    this.animate.advance(deltaTime * 0.001)\n  }\n\n  scrollTo(\n    target,\n    {\n      offset = 0,\n      immediate = false,\n      lock = false,\n      duration = this.options.duration,\n      easing = this.options.easing,\n      lerp = !duration && this.options.lerp,\n      onComplete = null,\n      force = false, // scroll even if stopped\n      programmatic = true, // called from outside of the class\n    } = {}\n  ) {\n    if (this.isStopped && !force) return\n\n    // keywords\n    if (['top', 'left', 'start'].includes(target)) {\n      target = 0\n    } else if (['bottom', 'right', 'end'].includes(target)) {\n      target = this.limit\n    } else {\n      let node\n\n      if (typeof target === 'string') {\n        // CSS selector\n        node = document.querySelector(target)\n      } else if (target?.nodeType) {\n        // Node element\n        node = target\n      }\n\n      if (node) {\n        if (this.options.wrapper !== window) {\n          // nested scroll offset correction\n          const wrapperRect = this.options.wrapper.getBoundingClientRect()\n          offset -= this.isHorizontal ? wrapperRect.left : wrapperRect.top\n        }\n\n        const rect = node.getBoundingClientRect()\n\n        target =\n          (this.isHorizontal ? rect.left : rect.top) + this.animatedScroll\n      }\n    }\n\n    if (typeof target !== 'number') return\n\n    target += offset\n    target = Math.round(target)\n\n    if (this.options.infinite) {\n      if (programmatic) {\n        this.targetScroll = this.animatedScroll = this.scroll\n      }\n    } else {\n      target = clamp(0, target, this.limit)\n    }\n\n    if (immediate) {\n      this.animatedScroll = this.targetScroll = target\n      this.setScroll(this.scroll)\n      this.reset()\n      this.emit()\n      onComplete?.()\n      return\n    }\n\n    if (!programmatic) {\n      if (target === this.targetScroll) return\n\n      this.targetScroll = target\n    }\n\n    this.animate.fromTo(this.animatedScroll, target, {\n      duration,\n      easing,\n      lerp,\n      onUpdate: (value, { completed }) => {\n        // started\n        if (lock) this.isLocked = true\n        this.isScrolling = true\n\n        // updated\n        this.velocity = value - this.animatedScroll\n        this.direction = Math.sign(this.velocity)\n\n        this.animatedScroll = value\n        this.setScroll(this.scroll)\n\n        if (programmatic) {\n          // wheel during programmatic should stop it\n          this.targetScroll = value\n        }\n\n        // completed\n        if (completed) {\n          if (lock) this.isLocked = false\n          requestAnimationFrame(() => {\n            //avoid double scroll event\n            this.isScrolling = false\n          })\n          this.velocity = 0\n          onComplete?.()\n        }\n\n        this.emit()\n      },\n    })\n  }\n\n  get rootElement() {\n    return this.options.wrapper === window\n      ? this.options.content\n      : this.options.wrapper\n  }\n\n  get limit() {\n    return this.isHorizontal ? this.dimensions.limit.x : this.dimensions.limit.y\n  }\n\n  get isHorizontal() {\n    return this.options.orientation === 'horizontal'\n  }\n\n  get actualScroll() {\n    // value browser takes into account\n    return this.isHorizontal\n      ? this.rootElement.scrollLeft\n      : this.rootElement.scrollTop\n  }\n\n  get scroll() {\n    return this.options.infinite\n      ? clampedModulo(this.animatedScroll, this.limit)\n      : this.animatedScroll\n  }\n\n  get progress() {\n    // avoid progress to be NaN\n    return this.limit === 0 ? 1 : this.scroll / this.limit\n  }\n\n  get isSmooth() {\n    return this.__isSmooth\n  }\n\n  set isSmooth(value) {\n    if (this.__isSmooth !== value) {\n      this.rootElement.classList.toggle('lenis-smooth', value)\n      this.__isSmooth = value\n    }\n  }\n\n  get isScrolling() {\n    return this.__isScrolling\n  }\n\n  set isScrolling(value) {\n    if (this.__isScrolling !== value) {\n      this.rootElement.classList.toggle('lenis-scrolling', value)\n      this.__isScrolling = value\n    }\n  }\n\n  get isStopped() {\n    return this.__isStopped\n  }\n\n  set isStopped(value) {\n    if (this.__isStopped !== value) {\n      this.rootElement.classList.toggle('lenis-stopped', value)\n      this.__isStopped = value\n    }\n  }\n}\n", "/**\n * Intersection Observer\n *\n * Detecting visibility of an element in the viewport.\n *\n * Features functions to:\n *\n * - Trigger inview/outOfView callbacks\n * - If the element has a requestAnimationFrame dependency, set interactivy status for the ScrollElement Class\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API}\n */\n\nimport { IIOOptions } from '../types';\nimport ScrollElement from './ScrollElement';\n\nexport default class IO {\n    public scrollElements: ScrollElement[];\n    private rootMargin: string;\n    private IORaf: boolean;\n    private observer!: IntersectionObserver;\n\n    constructor({\n        scrollElements,\n        rootMargin = '-1px -1px -1px -1px',\n        IORaf,\n    }: IIOOptions) {\n        // Parameters\n        this.scrollElements = scrollElements;\n        this.rootMargin = rootMargin;\n        this.IORaf = IORaf;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Intersection Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Options\n        const observerOptions = {\n            rootMargin: this.rootMargin,\n        };\n\n        // Callback\n        const onIntersect = (entries: IntersectionObserverEntry[]) => {\n            entries.forEach((entry) => {\n                const $targetItem: ScrollElement | undefined =\n                    this.scrollElements.find(\n                        (item) => item.$el === entry.target\n                    );\n\n                if (entry.isIntersecting) {\n                    $targetItem && ($targetItem.isAlreadyIntersected = true);\n                    this._setInview(entry);\n                } else if ($targetItem && $targetItem.isAlreadyIntersected) {\n                    this._setOutOfView(entry);\n                }\n            });\n        };\n\n        // Instance\n        this.observer = new IntersectionObserver(onIntersect, observerOptions);\n\n        // Observe each default elements\n        for (const scrollElement of this.scrollElements) {\n            const $scrollElement = scrollElement.$el;\n            this.observe($scrollElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Intersection Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n\n    /**\n     * Subscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to observe.\n     */\n    public observe($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.observe($scrollElement);\n    }\n\n    /**\n     * Unsubscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to unobserve.\n     */\n    public unobserve($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.unobserve($scrollElement);\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger inview callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setInview(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOn();\n        !this.IORaf && scrollElement?.setInview();\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger out of view callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setOutOfView(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOff();\n        !this.IORaf && scrollElement?.setOutOfView();\n\n        // Unobserve if element doesn't have repeat attribute\n        if (!scrollElement?.attributes.scrollRepeat && !this.IORaf) {\n            this.unobserve(entry.target as HTMLElement);\n        }\n    }\n}\n", "// https://greensock.com/docs/v3/GSAP/gsap.utils\n\n/**\n * Clamp a value to fit within a specific range (ex: clamp(0, 100, -12) --> 0).\n *\n * @param {number} min   - Minimum value expected.\n * @param {number} max   - Maximum value expected.\n * @param {number} value - Current value.\n *\n * @returns {number} - Clamped value.\n */\nexport function clamp(min: number, max: number, value: number): number {\n    return value < min ? min : value > max ? max : value;\n}\n\n/**\n * Map one range to another (ex: mapRange(-10, 10, 0, 100, 5) --> 75).\n *\n * @param {number} inMin  - Current minimum value.\n * @param {number} inMax  - Current maximum value.\n * @param {number} outMin - Maximum value expected.\n * @param {number} outMax - Maximum value expected.\n * @param {number} value  - Current value.\n *\n * @returns {number} - New value that should be between minimum value expected and maximum value.\n */\nexport function mapRange(\n    inMin: number,\n    inMax: number,\n    outMin: number,\n    outMax: number,\n    value: number\n): number {\n    const inRange = inMax - inMin;\n    const outRange = outMax - outMin;\n    return outMin + (((value - inMin) / inRange) * outRange || 0);\n}\n\n/**\n * Map a number within a range to a progress between 0 to 1 (ex: normalize(100, 200, 150) --> 0.5).\n *\n * @param {number} min   - Current minimum value.\n * @param {number} max   - Current maximum value.\n * @param {number} value - Current value.\n *\n * @returns {number} - New value that should be between 0 and 1.\n */\nexport function normalize(min: number, max: number, value: number): number {\n    return mapRange(min, max, 0, 1, value);\n}\n\n/**\n * Get closest number from an array.\n *\n * @param {number[]} array  - Numbers array.\n * @param {number}   target - Reference value.\n *\n * @returns {number} - Closest number.\n */\nexport function closestNumber(array: number[], target: number): number {\n    return array.reduce((prev, curr) => {\n        return Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev;\n    });\n}\n", "/**\n * Scroll Element\n *\n * Give tools to compute element progress in the viewport and triggers callbacks to animate it.\n *\n * Features functions to:\n *\n * - scrollClass - Add a custom class when the element is intersected by the offset\n * - scrollOffset - Determine offsets to intersect the element\n * - scrollPosition - Determine the element positions to consider an element as intersected.\n * - scrollModuleProgress - Send scroll progress to modular module that have a specific method (PROGRESS_MODULAR_METHOD)\n * - scrollCssProgress - Add a specific css variable (PROGRESS_CSS_VAR) that store the scroll progress\n * - scrollEventProgress - Send scroll progress to custom event listeners.\n * - scrollSpeed - Add a scroll multiplicator to create a parallax effect\n * - scrollRepeat - Repeat the option to trigger animation each time the element is intersected\n * - scrollCall - Call a custom event or a modular callback when the element is intersected\n */\n\nimport {\n    IModular,\n    IScrollElementOptions,\n    IScrollElementAttributes,\n    IScrollElementIntersection,\n    IScrollElementMetrics,\n    IProgressModularModules,\n    IScrollElementCallbacksValues,\n    scrollCallWay,\n    scrollCallFrom,\n    scrollOrientation,\n} from '../types';\nimport { clamp, closestNumber, normalize, mapRange } from '../utils/maths';\n\n/** Constants */\nconst INVIEW_CLASS = 'is-inview';\nconst PROGRESS_CSS_VAR = '--progress';\nconst PROGRESS_MODULAR_METHOD = 'onScrollProgress';\n\nexport default class ScrollElement {\n    public $el: HTMLElement;\n    public id: number;\n    public needRaf: boolean;\n    public attributes: IScrollElementAttributes;\n    public scrollOrientation: scrollOrientation;\n    public isAlreadyIntersected: boolean;\n\n    private intersection: IScrollElementIntersection;\n    private metrics: IScrollElementMetrics;\n    private currentScroll: number;\n    private translateValue: number;\n    private progress: number;\n    private lastProgress: number | null;\n    private modularInstance?: IModular;\n    private progressModularModules: IProgressModularModules[];\n    private isInview: boolean;\n    private isInteractive: boolean;\n    private isInFold: boolean;\n    private isFirstResize: boolean;\n\n    private subscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n    private unsubscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n\n    constructor({\n        $el,\n        id,\n        modularInstance,\n        subscribeElementUpdateFn,\n        unsubscribeElementUpdateFn,\n        needRaf,\n        scrollOrientation,\n    }: IScrollElementOptions) {\n        // Scroll DOM element\n        this.$el = $el;\n        // Unique ID\n        this.id = id;\n        // RAF option\n        this.needRaf = needRaf;\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n        // Modular.js\n        this.modularInstance = modularInstance;\n        // Parent's callbacks\n        this.subscribeElementUpdateFn = subscribeElementUpdateFn;\n        this.unsubscribeElementUpdateFn = unsubscribeElementUpdateFn;\n\n        // Attributes\n        this.attributes = {\n            scrollClass: this.$el.dataset['scrollClass'] ?? INVIEW_CLASS,\n            scrollOffset: this.$el.dataset['scrollOffset'] ?? '0,0',\n            scrollPosition: this.$el.dataset['scrollPosition'] ?? 'start,end',\n            scrollModuleProgress:\n                this.$el.dataset['scrollModuleProgress'] != null,\n            scrollCssProgress: this.$el.dataset['scrollCssProgress'] != null,\n            scrollEventProgress:\n                this.$el.dataset['scrollEventProgress'] ?? null,\n            scrollSpeed:\n                this.$el.dataset['scrollSpeed'] != null\n                    ? parseFloat(this.$el.dataset['scrollSpeed'])\n                    : null,\n            scrollRepeat: this.$el.dataset['scrollRepeat'] != null,\n            scrollCall: this.$el.dataset['scrollCall'] ?? null,\n            scrollCallSelf: this.$el.dataset['scrollCallSelf'] != null,\n            scrollIgnoreFold: this.$el.dataset['scrollIgnoreFold'] != null,\n            scrollEnableTouchSpeed:\n                this.$el.dataset['scrollEnableTouchSpeed'] != null,\n        };\n\n        // Limits\n        this.intersection = {\n            start: 0,\n            end: 0,\n        };\n\n        // Metrics\n        this.metrics = {\n            offsetStart: 0,\n            offsetEnd: 0,\n            bcr: {} as DOMRect,\n        };\n\n        // Scroll Values\n        this.currentScroll =\n            this.scrollOrientation === 'vertical'\n                ? window.scrollY\n                : window.scrollX;\n\n        // Parallax\n        this.translateValue = 0;\n\n        // Progress\n        this.progress = 0;\n        this.lastProgress = null;\n        this.progressModularModules = [];\n\n        // Inview\n        this.isInview = false;\n        this.isInteractive = false;\n        this.isAlreadyIntersected = false;\n        this.isInFold = false;\n        this.isFirstResize = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize progress tracking.\n     *\n     * @private\n     */\n    private _init() {\n        if (!this.needRaf) {\n            return;\n        }\n\n        // Prepare modules progress\n        if (this.modularInstance && this.attributes.scrollModuleProgress) {\n            this._getProgressModularModules();\n        }\n\n        // First resize to compute all values\n        this._resize();\n    }\n\n    /**\n     * Callback - Resize callback\n     */\n    public onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        this.currentScroll = currentScroll;\n        this._resize();\n    }\n\n    /**\n     * Callback - RAF callback\n     */\n    public onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        this.currentScroll = currentScroll;\n        this._computeProgress();\n\n        // Parallax\n        if (\n            this.attributes.scrollSpeed &&\n            !isNaN(this.attributes.scrollSpeed)\n        ) {\n            // if touch detected or smooth disabled\n            if (!this.attributes.scrollEnableTouchSpeed && !smooth) {\n                if (this.translateValue) {\n                    this.$el.style.transform = `translate3d(0, 0, 0)`;\n                }\n                this.translateValue = 0;\n\n                // if mousewheel or smooth enabled\n            } else {\n                // Check fold condition\n                if (this.isInFold) {\n                    const progress = Math.max(0, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                } else {\n                    const progress = mapRange(0, 1, -1, 1, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                }\n\n                this.$el.style.transform =\n                    this.scrollOrientation === 'vertical'\n                        ? `translate3d(0, ${this.translateValue}px, 0)`\n                        : `translate3d(${this.translateValue}px, 0, 0)`;\n            }\n        }\n    }\n\n    /**\n     * Inview callback\n     */\n    public setInview() {\n        if (this.isInview) {\n            return;\n        }\n\n        this.isInview = true;\n        this.$el.classList.add(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'enter';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Out of view callback\n     */\n    public setOutOfView() {\n        if (!(this.isInview && this.attributes.scrollRepeat)) {\n            return;\n        }\n\n        this.isInview = false;\n        this.$el.classList.remove(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'leave';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Switch interactivity on to subscribe the instance to the RAF\n     * and start calculations.\n     */\n    public setInteractivityOn() {\n        if (this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = true;\n        this.subscribeElementUpdateFn(this);\n    }\n\n    /**\n     * Switch interactivity off to unsubscribe the instance to the RAF\n     * and stop calculations.\n     */\n    public setInteractivityOff() {\n        if (!this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = false;\n        this.unsubscribeElementUpdateFn(this);\n\n        // Force progress to progress limit when the element is out\n        this.lastProgress != null &&\n            this._computeProgress(closestNumber([0, 1], this.lastProgress));\n    }\n\n    /**\n     * Resize method that compute the element's values.\n     *\n     * @private\n     */\n    private _resize() {\n        this.metrics.bcr = this.$el.getBoundingClientRect();\n        this._computeMetrics();\n        this._computeIntersection();\n\n        // First resize logic\n        if (this.isFirstResize) {\n            this.isFirstResize = false;\n            // Dispatch default call if the element is in fold.\n            if (this.isInFold) {\n                this.setInview();\n            }\n        }\n    }\n\n    /**\n     * Compute element's offsets and determine if the element is in fold.\n     *\n     * @private\n     */\n    private _computeMetrics() {\n        const { top, left, height, width } = this.metrics.bcr;\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        const metricsStart = this.scrollOrientation === 'vertical' ? top : left;\n        const metricsSize =\n            this.scrollOrientation === 'vertical' ? height : width;\n\n        this.metrics.offsetStart =\n            this.currentScroll + metricsStart - this.translateValue;\n        this.metrics.offsetEnd = this.metrics.offsetStart + metricsSize;\n\n        if (\n            this.metrics.offsetStart < wSize &&\n            !this.attributes.scrollIgnoreFold\n        ) {\n            this.isInFold = true;\n        } else {\n            this.isInFold = false;\n        }\n    }\n\n    /**\n     * Compute intersection values depending on the context.\n     *\n     * @private\n     */\n    private _computeIntersection() {\n        // Window size\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n\n        // Metrics size\n        const metricsSize =\n            this.scrollOrientation === 'vertical'\n                ? this.metrics.bcr.height\n                : this.metrics.bcr.width;\n\n        // Offset\n        const offset = this.attributes.scrollOffset.split(',');\n        const offsetStart = offset[0] != undefined ? offset[0].trim() : '0';\n        const offsetEnd = offset[1] != undefined ? offset[1].trim() : '0';\n\n        // Positions\n        const scrollPosition = this.attributes.scrollPosition.split(',');\n        let scrollPositionStart =\n            scrollPosition[0] != undefined ? scrollPosition[0].trim() : 'start';\n        const scrollPositionEnd =\n            scrollPosition[1] != undefined ? scrollPosition[1].trim() : 'end';\n\n        // Viewport\n        const viewportStart = offsetStart.includes('%')\n            ? wSize * parseInt(offsetStart.replace('%', '').trim()) * 0.01\n            : parseInt(offsetStart);\n        const viewportEnd = offsetEnd.includes('%')\n            ? wSize * parseInt(offsetEnd.replace('%', '').trim()) * 0.01\n            : parseInt(offsetEnd);\n\n        // Fold exception\n        if (this.isInFold) {\n            scrollPositionStart = 'fold';\n        }\n\n        // Define Intersection Start\n        switch (scrollPositionStart) {\n            case 'start':\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n\n            case 'middle':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize;\n                break;\n\n            case 'fold':\n                this.intersection.start = 0;\n                break;\n\n            default:\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n        }\n\n        // Define Intersection End\n        switch (scrollPositionEnd) {\n            case 'start':\n                this.intersection.end = this.metrics.offsetStart - viewportEnd;\n                break;\n\n            case 'middle':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n\n            default:\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n        }\n\n        // Avoid to have the end < the start intersection >\n        if (this.intersection.end <= this.intersection.start) {\n            switch (scrollPositionEnd) {\n                case 'start':\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n\n                case 'middle':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize * 0.5;\n                    break;\n\n                case 'end':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize;\n                    break;\n\n                default:\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Compute the scroll progress of the element depending\n     * on its intersection values.\n     *\n     * @private\n     *\n     * @param {number} [forcedProgress] - Value to force progress.\n     */\n    private _computeProgress(forcedProgress?: number) {\n        // Progress\n        const progress =\n            forcedProgress ??\n            clamp(\n                0,\n                1,\n                normalize(\n                    this.intersection.start,\n                    this.intersection.end,\n                    this.currentScroll\n                )\n            );\n\n        this.progress = progress;\n\n        if (progress != this.lastProgress) {\n            this.lastProgress = progress;\n\n            // Set the element's progress to the css variable\n            this.attributes.scrollCssProgress && this._setCssProgress(progress);\n\n            // Set the element's progress to the custom event listeners\n            this.attributes.scrollEventProgress &&\n                this._setCustomEventProgress(progress);\n\n            // Set the element's progress to inline modules\n            if (this.attributes.scrollModuleProgress) {\n                for (const modularModules of this.progressModularModules) {\n                    this.modularInstance &&\n                        this.modularInstance.call(\n                            PROGRESS_MODULAR_METHOD,\n                            progress,\n                            modularModules.moduleName,\n                            modularModules.moduleId\n                        );\n                }\n            }\n\n            // Logic to trigger the inview/out of view callbacks\n            progress > 0 && progress < 1 && this.setInview();\n            progress === 0 && this.setOutOfView();\n            progress === 1 && this.setOutOfView();\n        }\n    }\n\n    /**\n     * Set the element's progress to a specific css variable.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCssProgress(currentProgress = 0) {\n        this.$el.style.setProperty(\n            PROGRESS_CSS_VAR,\n            currentProgress.toString()\n        );\n    }\n\n    /**\n     * Set the element's progress to the custom event listeners.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCustomEventProgress(currentProgress = 0) {\n        const customEventName = this.attributes.scrollEventProgress;\n\n        if (!customEventName) return;\n\n        const customEvent = new CustomEvent(customEventName, {\n            detail: {\n                target: this.$el,\n                progress: currentProgress,\n            },\n        });\n        window.dispatchEvent(customEvent);\n    }\n\n    /**\n     * Get modular modules that can listen the element's progress.\n     *\n     * @private\n     */\n    _getProgressModularModules() {\n        if (!this.modularInstance) {\n            return;\n        }\n\n        const modulesIdNames = Object.keys(this.$el.dataset).filter((key) =>\n            key.includes('module')\n        );\n        const modules: any[] = Object.entries(this.modularInstance.modules);\n\n        if (!modulesIdNames.length) {\n            return;\n        }\n\n        for (const modulesIdName of modulesIdNames) {\n            const moduleId = this.$el.dataset[modulesIdName];\n\n            if (!moduleId) {\n                return;\n            }\n\n            for (const module of modules) {\n                const [moduleName, moduleObj] = module;\n\n                if (moduleId in moduleObj) {\n                    this.progressModularModules.push({\n                        moduleName,\n                        moduleId,\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Function to get scroll call from.\n     *\n     * @private\n     */\n    _getScrollCallFrom(): scrollCallFrom {\n        const closestIntersectionValue = closestNumber(\n            [this.intersection.start, this.intersection.end],\n            this.currentScroll\n        );\n        return this.intersection.start === closestIntersectionValue\n            ? 'start'\n            : 'end';\n    }\n\n    /**\n     * Function to dispatch a custom event or call a modular callback.\n     *\n     * @private\n     *\n     * @param {scrollCallWay} way - Enter or leave.\n     * @param {scrollCallFrom} from - Start or end.\n     */\n    _dispatchCall(way: scrollCallWay, from: scrollCallFrom) {\n        const callParameters = this.attributes.scrollCall?.split(',');\n        const callSelf = this.attributes?.scrollCallSelf;\n\n        if (callParameters && callParameters.length > 1) {\n            // Using Modular.js (https://github.com/modularorg/modularjs)\n            const [func, moduleName, moduleId] = callParameters;\n            let targetModuleId;\n\n            // If the module is set on the scroll element\n            if (callSelf) {\n                targetModuleId = this.$el.dataset[`module${moduleName.trim()}`];\n            } else {\n                targetModuleId = moduleId;\n            }\n\n            this.modularInstance &&\n                this.modularInstance.call(\n                    func.trim(),\n                    {\n                        target: this.$el,\n                        way,\n                        from,\n                    },\n                    moduleName.trim(),\n                    targetModuleId?.trim()\n                );\n        } else if (callParameters) {\n            // Using CustomEvent API (https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)\n            const [customEventName] = callParameters;\n            const customEvent = new CustomEvent(customEventName, {\n                detail: {\n                    target: this.$el,\n                    way,\n                    from,\n                },\n            });\n            window.dispatchEvent(customEvent);\n        }\n    }\n}\n", "/**\n * Integrates Lenis with Locomotive's built-in animation system\n */\n\nimport {\n    CoreOptions,\n    IModular,\n    IScrollElementCallbacksValues,\n    scrollOrientation,\n} from '../types';\nimport IO from './IO';\nimport ScrollElement from './ScrollElement';\n\n/** Defined attributes that need a requestAnimationFrame */\nconst ATTRIBUTES_THAT_NEED_RAF = [\n    'scrollOffset',\n    'scrollPosition',\n    'scrollModuleProgress',\n    'scrollCssProgress',\n    'scrollEventProgress',\n    'scrollSpeed',\n];\n\n/** Default root margins */\nconst TRIGGER_ROOT_MARGIN = '-1px -1px -1px -1px';\nconst RAF_ROOT_MARGIN = '100% 100% 100% 100%'; // Add 100vh top/bottom && 100vw left/right to use a biggest value with data-scroll-speed\n\nexport default class Core {\n    private $scrollContainer!: HTMLElement;\n    private modularInstance?: IModular;\n    private triggerRootMargin!: string;\n    private rafRootMargin!: string;\n    private scrollElements!: ScrollElement[];\n    private triggeredScrollElements!: ScrollElement[];\n    private RAFScrollElements!: ScrollElement[];\n    private scrollElementsToUpdate!: ScrollElement[];\n    private IOTriggerInstance!: IO;\n    private IORafInstance!: IO;\n    private scrollOrientation!: scrollOrientation;\n\n    constructor({\n        $el,\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        scrollOrientation,\n    }: CoreOptions) {\n        if (!$el) {\n            console.error('Please provide a DOM Element as scrollContainer');\n            return;\n        }\n\n        // Scroll container\n        this.$scrollContainer = $el;\n\n        // Modular.js\n        this.modularInstance = modularInstance;\n\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n\n        // IO Margins\n        this.triggerRootMargin = triggerRootMargin ?? TRIGGER_ROOT_MARGIN;\n        this.rafRootMargin = rafRootMargin ?? RAF_ROOT_MARGIN;\n\n        // ScrollElements arrays\n        this.scrollElements = [];\n        this.triggeredScrollElements = [];\n        this.RAFScrollElements = [];\n        this.scrollElementsToUpdate = [];\n\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize the core.\n     *\n     * @private\n     */\n    private _init() {\n        const $scrollElements =\n            this.$scrollContainer.querySelectorAll('[data-scroll]');\n\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements($scrollElementsArr);\n\n        // Trigger IO\n        this.IOTriggerInstance = new IO({\n            scrollElements: [...this.triggeredScrollElements],\n            rootMargin: this.triggerRootMargin,\n            IORaf: false,\n        });\n\n        // Raf IO\n        this.IORafInstance = new IO({\n            scrollElements: [...this.RAFScrollElements],\n            rootMargin: this.rafRootMargin,\n            IORaf: true,\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy core.\n     */\n    public destroy() {\n        this.IOTriggerInstance.destroy();\n        this.IORafInstance.destroy();\n        this._unsubscribeAllScrollElements();\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.RAFScrollElements) {\n            scrollElement.onResize({\n                currentScroll,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Callback - RAF callback.\n     */\n    onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.scrollElementsToUpdate) {\n            scrollElement.onRender({\n                currentScroll,\n                smooth,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Remove items from lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $oldContainer - HTMLElement that contains data-scroll elements to unsubscribe\n     */\n    removeScrollElements($oldContainer: HTMLElement) {\n        const $scrollElementsToRemove =\n            $oldContainer.querySelectorAll('[data-scroll]');\n\n        if (!$scrollElementsToRemove.length) return;\n\n        // 1. Remove from IO\n        for (let index = 0; index < this.triggeredScrollElements.length; index++) {\n            const scrollElement = this.triggeredScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IOTriggerInstance.unobserve(scrollElement.$el);\n                this.triggeredScrollElements.splice(index, 1);\n            }\n        }\n\n        for (let index = 0; index < this.RAFScrollElements.length; index++) {\n            const scrollElement = this.RAFScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IORafInstance.unobserve(scrollElement.$el);\n                this.RAFScrollElements.splice(index, 1);\n            }\n        }\n\n        // 2. Remove from scrollElementsToUpdate[] and scrollElements[]\n        $scrollElementsToRemove.forEach(($scrollElement) => {\n            const targetScrollElementToUpdate =\n                this.scrollElementsToUpdate.find(\n                    (scrollElement) => scrollElement.$el === $scrollElement\n                );\n            const targetScrollElement = this.scrollElements.find(\n                (scrollElement) => scrollElement.$el === $scrollElement\n            );\n\n            if (targetScrollElementToUpdate) {\n                this._unsubscribeElementUpdate(targetScrollElementToUpdate);\n            }\n            if (targetScrollElement) {\n                this.scrollElements = this.scrollElements.filter(\n                    (scrollElementItem) =>\n                        scrollElementItem.id != targetScrollElement.id\n                );\n            }\n        });\n    }\n\n    /**\n     * Add items to lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $newContainer - HTMLElement that contains data-scroll elements to subscribe\n     */\n    addScrollElements($newContainer: HTMLElement) {\n        // 3. Rebuild ScrollElements\n        const $scrollElements = $newContainer.querySelectorAll('[data-scroll]');\n\n        // 4. Get max scrollElement.id\n        const ids: number[] = [];\n        this.scrollElements.forEach((scrollElement) => {\n            ids.push(scrollElement.id);\n        });\n        const maxID = Math.max(...ids);\n        const fromIndex = maxID + 1;\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements(\n            $scrollElementsArr,\n            fromIndex,\n            true\n        );\n    }\n\n    /**\n     * Create a ScrollElement instance for each elements with\n     * `data-scroll` attribute.\n     *\n     * @private\n     *\n     * @param {HTMLElement[]} $scrollElements - List of elements that need\n     *     to be regarded.\n     */\n    _subscribeScrollElements(\n        $scrollElements: HTMLElement[],\n        fromIndex = 0,\n        toObserve = false\n    ) {\n        // For each scroll element create a ScrollElement instance\n        for (let index = 0; index < $scrollElements.length; index++) {\n            const $scrollElement = $scrollElements[index];\n            const needRaf = this._checkRafNeeded($scrollElement);\n\n            const scrollElementInstance = new ScrollElement({\n                $el: $scrollElement,\n                id: fromIndex + index,\n                scrollOrientation: this.scrollOrientation,\n                modularInstance: this.modularInstance,\n                subscribeElementUpdateFn:\n                    this._subscribeElementUpdate.bind(this),\n                unsubscribeElementUpdateFn:\n                    this._unsubscribeElementUpdate.bind(this),\n                needRaf,\n            });\n\n            // Push to common array\n            this.scrollElements.push(scrollElementInstance);\n\n            // Push to specific array\n            if (needRaf) {\n                this.RAFScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IORafInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IORafInstance.observe(scrollElementInstance.$el);\n                }\n            } else {\n                this.triggeredScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IOTriggerInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IOTriggerInstance.observe(scrollElementInstance.$el);\n                }\n            }\n        }\n    }\n\n    /**\n     * Clear all ScrollElement arrays.\n     *\n     * @private\n     */\n    _unsubscribeAllScrollElements() {\n        this.scrollElements = [];\n        this.RAFScrollElements = [];\n        this.triggeredScrollElements = [];\n        this.scrollElementsToUpdate = [];\n    }\n\n    /**\n     * Subscribe ScrollElement instance that needs to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - ScrollElement instance inview\n     *     that needs to be updated.\n     */\n    _subscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate.push(scrollElement);\n    }\n\n    /**\n     * Unscribe ScrollElement instance that doesn't need to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - The updated ScrollElement instance\n     *     out of view now.\n     */\n    _unsubscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(\n            (scrollElementToUpdate) =>\n                scrollElementToUpdate.id != scrollElement.id\n        );\n    }\n\n    /**\n     * Check if a DOM Element need a requestAnimationFrame to be used.\n     *\n     * @private\n     *\n     * @param {HTMLElement} $scrollElement - The element that needs to be checked.\n     *\n     * @returns {boolean}\n     */\n    _checkRafNeeded($scrollElement: HTMLElement) {\n        let attributesThatNeedRaf = [...ATTRIBUTES_THAT_NEED_RAF];\n\n        // Remove utils\n        const removeAttribute = (attributeToRemove: string) => {\n            attributesThatNeedRaf = attributesThatNeedRaf.filter(\n                (attribute) => attribute != attributeToRemove\n            );\n        };\n\n        // 1. Check scroll offset values\n        if ($scrollElement.dataset.scrollOffset) {\n            const value = $scrollElement.dataset.scrollOffset\n                .split(',')\n                .map((test) => test.replace('%', '').trim())\n                .join(',');\n            if (value != '0,0') {\n                return true;\n            } else {\n                removeAttribute('scrollOffset');\n            }\n        } else {\n            removeAttribute('scrollOffset');\n        }\n\n        // 2. Check scroll position values\n        if ($scrollElement.dataset.scrollPosition) {\n            const value = $scrollElement.dataset.scrollPosition.trim();\n            if (value != 'top,bottom') {\n                return true;\n            } else {\n                removeAttribute('scrollPosition');\n            }\n        } else {\n            removeAttribute('scrollPosition');\n        }\n\n        // 3. Check scroll speed values\n        if (\n            $scrollElement.dataset.scrollSpeed &&\n            !isNaN(parseFloat($scrollElement.dataset.scrollSpeed))\n        ) {\n            return true;\n        } else {\n            removeAttribute('scrollSpeed');\n        }\n\n        // 4. Check others attributes\n        for (const attribute of attributesThatNeedRaf) {\n            if (attribute in $scrollElement.dataset) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n", "/**\n * Resize Observer\n *\n * The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size,\n * with notifications being delivered to the observer each time the size changes.\n *\n * Features functions to:\n *\n * - Trigger the resize callback if the specified element's size change.\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API}\n */\n\nimport { IROOptions } from '../types';\n\nexport default class RO {\n    private $resizeElements: HTMLElement[];\n    private isFirstObserve: boolean;\n    private observer!: ResizeObserver;\n    private resizeCallback: () => void;\n\n    constructor({ resizeElements, resizeCallback = () => {} }: IROOptions) {\n        // Parameters\n        this.$resizeElements = resizeElements;\n        this.resizeCallback = resizeCallback;\n\n        // Flags\n        this.isFirstObserve = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Resize Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Callback\n        const onResize = (entries: ResizeObserverEntry[]) => {\n            !this.isFirstObserve && this.resizeCallback?.();\n            this.isFirstObserve = false;\n        };\n\n        // Instance\n        this.observer = new ResizeObserver(onResize);\n\n        // Observe each default elements\n        for (const $resizeElement of this.$resizeElements) {\n            this.observer.observe($resizeElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Resize Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n}\n", "//@ts-ignore\nimport Lenis from '@studio-freight/lenis';\nimport Core from './core/Core';\nimport RO from './core/RO';\nimport {\n    ILenisOptions,\n    ILenisScrollToOptions,\n    ILenisScrollValues,\n    ILocomotiveScrollOptions,\n    IModular,\n    lenisTargetScrollTo,\n} from './types';\n\n/**\n * @type {ILenisOptions}\n */\nconst defaultLenisOptions: ILenisOptions = {\n    wrapper: window,\n    content: document.documentElement,\n    lerp: 0.1,\n    duration: 1.2,\n    orientation: 'vertical',\n    gestureOrientation: 'vertical',\n    smoothWheel: true,\n    smoothTouch: false,\n    wheelMultiplier: 1,\n    touchMultiplier: 2,\n    normalizeWheel: true,\n    easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // https://www.desmos.com/calculator/brs54l4xou\n};\n\n/**\n * Locomotive Scroll\n *\n * Detection of elements in viewport & smooth scrolling with parallax.\n *\n * Inspired by\n * {@link https://github.com/locomotivemtl/locomotive-scroll locomotive-scroll.js}\n * and built around\n * {@link https://github.com/studio-freight/lenis lenis.js}.\n */\n\nexport default class LocomotiveScroll {\n    public rafPlaying: boolean;\n\n    private lenisInstance: any;\n    private coreInstance: any;\n\n    private lenisOptions: ILenisOptions;\n    private modularInstance?: IModular;\n    private triggerRootMargin?: string;\n    private rafRootMargin?: string;\n    private rafInstance?: any;\n    private autoResize?: boolean;\n    private autoStart?: boolean;\n    private ROInstance?: RO;\n    private scrollCallback?(scrollValues: ILenisScrollValues): void;\n    private initCustomTicker?: (render: () => void) => void;\n    private destroyCustomTicker?: (render: () => void) => void;\n    private _onRenderBind: () => void;\n    private _onResizeBind: () => void;\n    private _onScrollToBind: (event: MouseEvent) => void;\n\n    constructor({\n        lenisOptions = {},\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        autoResize = true,\n        autoStart = true,\n        scrollCallback = () => {},\n        initCustomTicker,\n        destroyCustomTicker,\n    }: ILocomotiveScrollOptions = {}) {\n        // Arguments\n        this.lenisOptions = { ...defaultLenisOptions, ...lenisOptions };\n\n        Object.assign(this, {\n            lenisOptions,\n            modularInstance,\n            triggerRootMargin,\n            rafRootMargin,\n            autoResize,\n            autoStart,\n            scrollCallback,\n            initCustomTicker,\n            destroyCustomTicker,\n        });\n\n        // Binding\n        this._onRenderBind = this._onRender.bind(this);\n        this._onScrollToBind = this._onScrollTo.bind(this);\n        this._onResizeBind = this._onResize.bind(this);\n\n        // Data\n        this.rafPlaying = false;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize instance.\n     *\n     * @private\n     */\n    private _init(): void {\n        // Create Lenis instance\n        this.lenisInstance = new Lenis({\n            wrapper: this.lenisOptions.wrapper,\n            content: this.lenisOptions.content,\n            lerp: this.lenisOptions.lerp,\n            duration: this.lenisOptions.duration,\n            orientation: this.lenisOptions.orientation,\n            gestureOrientation: this.lenisOptions.gestureOrientation,\n            smoothWheel: this.lenisOptions.smoothWheel,\n            smoothTouch: this.lenisOptions.smoothTouch,\n            wheelMultiplier: this.lenisOptions.wheelMultiplier,\n            touchMultiplier: this.lenisOptions.touchMultiplier,\n            normalizeWheel: this.lenisOptions.normalizeWheel,\n            easing: this.lenisOptions.easing,\n        });\n        this.lenisInstance?.on('scroll', this.scrollCallback);\n\n        // Add scroll direction attribute on body\n        document.documentElement.setAttribute(\n            'data-scroll-orientation',\n            this.lenisInstance.options.orientation\n        );\n\n        requestAnimationFrame(() => {\n            // Create Core Instance\n            this.coreInstance = new Core({\n                $el: this.lenisInstance.rootElement,\n                modularInstance: this.modularInstance,\n                triggerRootMargin: this.triggerRootMargin,\n                rafRootMargin: this.rafRootMargin,\n                scrollOrientation: this.lenisInstance.options.orientation,\n            });\n\n            // Bind Events\n            this._bindEvents();\n\n            // RAF warning\n            if (this.initCustomTicker && !this.destroyCustomTicker) {\n                console.warn(\n                    'initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            } else if (!this.initCustomTicker && this.destroyCustomTicker) {\n                console.warn(\n                    'destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            }\n\n            // Start RAF\n            this.autoStart && this.start();\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy instance.\n     */\n    public destroy(): void {\n        // Stop raf\n        this.stop();\n        // Unbind Events\n        this._unbindEvents();\n        // Destroy Lenis\n        this.lenisInstance.destroy();\n        // Destroy Core\n        this.coreInstance.destroy();\n    }\n\n    /**\n     * Events - Subscribe events to listen.\n     */\n    private _bindEvents() {\n        this._bindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance = new RO({\n                    resizeElements: [document.body],\n                    resizeCallback: this._onResizeBind,\n                });\n            } else {\n                (window as any).addEventListener('resize', this._onResizeBind);\n            }\n        }\n    }\n\n    /**\n     * Events - Unsubscribe listened events.\n     */\n    private _unbindEvents() {\n        this._unbindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance && this.ROInstance.destroy();\n            } else {\n                (window as any).removeEventListener(\n                    'resize',\n                    this._onResizeBind\n                );\n            }\n        }\n    }\n\n    /**\n     * Events - Subscribe scrollTo events to listen.\n     */\n    private _bindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement): void => {\n                $el.addEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Events - Unsubscribe scrollTo listened events.\n     */\n    private _unbindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement) => {\n                $el.removeEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    private _onResize() {\n        // Waiting the next frame to get the new current scroll value return by Lenis\n        requestAnimationFrame(() => {\n            this.coreInstance?.onResize({\n                currentScroll: this.lenisInstance.scroll,\n            });\n        });\n    }\n\n    /**\n     * Callback - Render callback.\n     */\n    private _onRender() {\n        this.lenisInstance?.raf(Date.now());\n\n        this.coreInstance?.onRender({\n            currentScroll: this.lenisInstance.scroll,\n            smooth: this.lenisInstance.isSmooth,\n        });\n    }\n\n    /**\n     * Callback - Scroll To callback.\n     */\n    private _onScrollTo(event: MouseEvent) {\n        event.preventDefault();\n        const $target = (event.currentTarget as HTMLElement) ?? null;\n        if (!$target) return;\n        const target =\n            $target.getAttribute('data-scroll-to-href') ||\n            $target.getAttribute('href');\n        const offset = $target.getAttribute('data-scroll-to-offset') || 0;\n        const duration =\n            $target.getAttribute('data-scroll-to-duration') ||\n            this.lenisOptions.duration ||\n            defaultLenisOptions.duration;\n\n        target &&\n            this.scrollTo(target, {\n                offset: typeof offset === 'string' ? parseInt(offset) : offset,\n                duration:\n                    typeof duration === 'string'\n                        ? parseInt(duration)\n                        : duration,\n            });\n    }\n\n    /**\n     * Start RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public start(): void {\n        if (this.rafPlaying) {\n            return;\n        }\n\n        this.rafPlaying = true;\n        this.initCustomTicker\n            ? this.initCustomTicker(this._onRenderBind)\n            : this._raf();\n    }\n\n    /**\n     * Stop RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public stop(): void {\n        if (!this.rafPlaying) {\n            return;\n        }\n\n        this.rafPlaying = false;\n        this.destroyCustomTicker\n            ? this.destroyCustomTicker(this._onRenderBind)\n            : this.rafInstance && cancelAnimationFrame(this.rafInstance);\n    }\n\n    /**\n     * Remove old scroll elements items and rebuild ScrollElements instances.\n     */\n    public removeScrollElements($oldContainer: HTMLElement): void {\n        if (!$oldContainer) {\n            console.error('Please provide a DOM Element as $oldContainer');\n            return;\n        }\n\n        this._unbindScrollToEvents($oldContainer);\n        this.coreInstance?.removeScrollElements($oldContainer);\n    }\n\n    /**\n     * Add new scroll elements items and rebuild ScrollElements instances.\n     */\n    public addScrollElements($newContainer: HTMLElement): void {\n        if (!$newContainer) {\n            console.error('Please provide a DOM Element as $newContainer');\n            return;\n        }\n\n        this.coreInstance?.addScrollElements($newContainer);\n        requestAnimationFrame(() => {\n            this._bindScrollToEvents($newContainer);\n        });\n    }\n\n    /**\n     * Trigger resize callback.\n     */\n    public resize(): void {\n        this._onResizeBind();\n    }\n\n    /**\n     * Trigger scroll to callback.\n     */\n    public scrollTo(\n        target: lenisTargetScrollTo,\n        options?: ILenisScrollToOptions\n    ): void {\n        this.lenisInstance?.scrollTo(target, {\n            offset: options?.offset,\n            lerp: options?.lerp,\n            duration: options?.duration,\n            immediate: options?.immediate,\n            lock: options?.lock,\n            force: options?.force,\n            easing: options?.easing,\n            onComplete: options?.onComplete,\n        });\n    }\n\n    /**\n     * RequestAnimationFrame that active Lenis smooth and scroll progress.\n     *\n     * @private\n     *\n     */\n    private _raf() {\n        this._onRenderBind();\n        this.rafInstance = requestAnimationFrame(() => this._raf());\n    }\n}\n"],
  "mappings": "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",
  "names": ["clamp", "min", "input", "max", "Math", "Animate", "advance", "deltaTime", "_this$onUpdate", "this", "isRunning", "completed", "lerp", "value", "amt", "to", "round", "currentTime", "linearProgress", "duration", "easedProgress", "easing", "from", "onUpdate", "call", "stop", "fromTo", "t", "debounce", "callback", "delay", "timer", "args", "arguments", "context", "clearTimeout", "setTimeout", "apply", "Dimensions", "constructor", "wrapper", "content", "onWindowResize", "width", "window", "innerWidth", "height", "innerHeight", "onWrapperResize", "clientWidth", "clientHeight", "onContentResize", "element", "document", "documentElement", "scrollHeight", "scrollWidth", "addEventListener", "wrapperResizeObserver", "ResizeObserver", "observe", "contentResizeObserver", "destroy", "_this$wrapperResizeOb", "_this$contentResizeOb", "removeEventListener", "disconnect", "limit", "x", "y", "createNanoEvents", "events", "emit", "event", "callbacks", "i", "length", "on", "cb", "_this$events$event", "push", "_this$events$event2", "filter", "VirtualScroll", "wheelMultiplier", "touchMultiplier", "normalizeWheel", "onTouchStart", "clientX", "clientY", "targetTouches", "touchStart", "lastDelta", "onTouchMove", "deltaX", "deltaY", "emitter", "type", "onTouchEnd", "inertia", "onWheel", "passive", "Lenis", "direction", "gestureDirection", "mouseMultiplier", "smooth", "wheelEventsTarget", "smoothWheel", "smoothTouch", "syncTouch", "syncTouchLerp", "touchInertiaMultiplier", "pow", "infinite", "orientation", "gestureOrientation", "onVirtualScroll", "ctrlKey", "isTouch", "isWheel", "options", "scroll", "composedPath", "find", "node", "hasAttribute", "isStopped", "isLocked", "preventDefault", "isSmooth", "isScrolling", "animate", "delta", "abs", "hasTouchInertia", "velocity", "scrollTo", "targetScroll", "_extends", "programmatic", "onScroll", "lastScroll", "animatedScroll", "actualScroll", "sign", "console", "warn", "lenisVersion", "body", "dimensions", "rootElement", "classList", "add", "virtualScroll", "off", "_this$emitter$events$", "setScroll", "isHorizontal", "scrollLeft", "scrollTop", "reset", "start", "raf", "time", "target", "offset", "immediate", "lock", "onComplete", "force", "includes", "_target", "querySelector", "nodeType", "wrapperRect", "getBoundingClientRect", "left", "top", "rect", "requestAnimationFrame", "dividend", "divisor", "remainder", "progress", "__isSmooth", "toggle", "__isScrolling", "__isStopped", "IO", "constructor", "scrollElements", "rootMargin", "IORaf", "observer", "_init", "observerOptions", "onIntersect", "entries", "forEach", "entry", "$targetItem", "find", "item", "$el", "target", "isIntersecting", "isAlreadyIntersected", "_setInview", "_setOutOfView", "IntersectionObserver", "scrollElement", "$scrollElement", "observe", "destroy", "disconnect", "unobserve", "setInteractivityOn", "setInview", "setInteractivityOff", "setOutOfView", "attributes", "scrollRepeat", "clamp", "min", "max", "value", "mapRange", "inMin", "inMax", "outMin", "outMax", "inRange", "outRange", "normalize", "closestNumber", "array", "reduce", "prev", "curr", "Math", "abs", "INVIEW_CLASS", "PROGRESS_CSS_VAR", "PROGRESS_MODULAR_METHOD", "ScrollElement", "id", "modularInstance", "subscribeElementUpdateFn", "unsubscribeElementUpdateFn", "needRaf", "scrollOrientation", "_this$$el$dataset$scr", "_this$$el$dataset$scr2", "_this$$el$dataset$scr3", "_this$$el$dataset$scr4", "_this$$el$dataset$scr5", "intersection", "metrics", "currentScroll", "translateValue", "progress", "lastProgress", "progressModularModules", "isInview", "isInteractive", "isInFold", "isFirstResize", "scrollClass", "dataset", "scrollOffset", "scrollPosition", "scrollModuleProgress", "scrollCssProgress", "scrollEventProgress", "scrollSpeed", "parseFloat", "scrollCall", "scrollCallSelf", "scrollIgnoreFold", "scrollEnableTouchSpeed", "start", "end", "offsetStart", "offsetEnd", "bcr", "window", "scrollY", "scrollX", "_getProgressModularModules", "_resize", "onResize", "onRender", "smooth", "wSize", "innerHeight", "innerWidth", "_computeProgress", "isNaN", "style", "transform", "classList", "add", "way", "from", "_getScrollCallFrom", "_dispatchCall", "remove", "getBoundingClientRect", "_computeMetrics", "_computeIntersection", "top", "left", "height", "width", "metricsStart", "metricsSize", "offset", "split", "undefined", "trim", "scrollPositionStart", "scrollPositionEnd", "viewportStart", "includes", "parseInt", "replace", "viewportEnd", "forcedProgress", "_setCssProgress", "_setCustomEventProgress", "modularModules", "call", "moduleName", "moduleId", "currentProgress", "setProperty", "toString", "customEventName", "customEvent", "CustomEvent", "detail", "dispatchEvent", "modulesIdNames", "Object", "keys", "filter", "key", "modules", "length", "modulesIdName", "module", "moduleObj", "push", "closestIntersectionValue", "_this$attributes$scro", "_this$attributes", "callParameters", "callSelf", "_targetModuleId", "func", "targetModuleId", "ATTRIBUTES_THAT_NEED_RAF", "TRIGGER_ROOT_MARGIN", "RAF_ROOT_MARGIN", "Core", "triggerRootMargin", "rafRootMargin", "$scrollContainer", "triggeredScrollElements", "RAFScrollElements", "scrollElementsToUpdate", "IOTriggerInstance", "IORafInstance", "console", "error", "$scrollElements", "querySelectorAll", "$scrollElementsArr", "Array", "_subscribeScrollElements", "_unsubscribeAllScrollElements", "removeScrollElements", "$oldContainer", "$scrollElementsToRemove", "index", "$scrollElementsToRemoveArr", "indexOf", "splice", "targetScrollElementToUpdate", "targetScrollElement", "_unsubscribeElementUpdate", "scrollElementItem", "addScrollElements", "$newContainer", "ids", "maxID", "fromIndex", "toObserve", "_checkRafNeeded", "scrollElementInstance", "_subscribeElementUpdate", "bind", "scrollElementToUpdate", "attributesThatNeedRaf", "removeAttribute", "attributeToRemove", "attribute", "map", "test", "join", "RO", "resizeElements", "resizeCallback", "$resizeElements", "isFirstObserve", "_this$resizeCallback", "ResizeObserver", "$resizeElement", "defaultLenisOptions", "wrapper", "content", "document", "documentElement", "lerp", "duration", "orientation", "gestureOrientation", "smoothWheel", "smoothTouch", "wheelMultiplier", "touchMultiplier", "normalizeWheel", "easing", "t", "pow", "LocomotiveScroll", "lenisOptions", "autoResize", "autoStart", "scrollCallback", "initCustomTicker", "destroyCustomTicker", "rafPlaying", "lenisInstance", "coreInstance", "rafInstance", "ROInstance", "_onRenderBind", "_onResizeBind", "_onScrollToBind", "_extends", "assign", "_onRender", "_onScrollTo", "_onResize", "_this$lenisInstance", "Lenis", "on", "setAttribute", "options", "requestAnimationFrame", "rootElement", "_bindEvents", "warn", "stop", "_unbindEvents", "_bindScrollToEvents", "body", "addEventListener", "_unbindScrollToEvents", "removeEventListener", "$container", "$rootContainer", "$scrollToElements", "_this$coreInstance", "scroll", "_this$lenisInstance2", "_this$coreInstance2", "raf", "Date", "now", "isSmooth", "event", "_event$currentTarget", "preventDefault", "$target", "currentTarget", "getAttribute", "scrollTo", "_raf", "cancelAnimationFrame", "_this$coreInstance3", "_this$coreInstance4", "resize", "_this$lenisInstance3", "immediate", "lock", "force", "onComplete"]
}
